// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sqliteModel.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Account.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Account TABLE
class TableAccount extends SqfEntityTableBase {
  TableAccount() {
    // declare properties of EntityTable
    tableName = 'account';
    primaryKeyName = '';
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer, isPrimaryKeyField: true),
      SqfEntityFieldBase('userId', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('email', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('fullName', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('gender', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('address', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('phone', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('birthDate', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('city', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('zipCode', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('isActive', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('idDoku', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('whatsAppNumber', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('loginCheck', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('deviceLoyalty', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('createDate', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAccount();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class SkeletonDBModel extends SqfEntityModelProvider {
  SkeletonDBModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TableAccount.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Account
class Account {
  Account(
      {this.id,
      this.userId,
      this.email,
      this.fullName,
      this.gender,
      this.address,
      this.phone,
      this.birthDate,
      this.city,
      this.zipCode,
      this.isActive,
      this.idDoku,
      this.whatsAppNumber,
      this.loginCheck,
      this.deviceLoyalty,
      this.createDate}) {
    _setDefaultValues();
  }
  Account.withFields(
      this.userId,
      this.email,
      this.fullName,
      this.gender,
      this.address,
      this.phone,
      this.birthDate,
      this.city,
      this.zipCode,
      this.isActive,
      this.idDoku,
      this.whatsAppNumber,
      this.loginCheck,
      this.deviceLoyalty,
      this.createDate) {
    _setDefaultValues();
  }
  Account.withId(
      this.id,
      this.userId,
      this.email,
      this.fullName,
      this.gender,
      this.address,
      this.phone,
      this.birthDate,
      this.city,
      this.zipCode,
      this.isActive,
      this.idDoku,
      this.whatsAppNumber,
      this.loginCheck,
      this.deviceLoyalty,
      this.createDate) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Account.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['userId'] != null) {
      userId = o['userId'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['fullName'] != null) {
      fullName = o['fullName'].toString();
    }
    if (o['gender'] != null) {
      gender = o['gender'].toString();
    }
    if (o['address'] != null) {
      address = o['address'].toString();
    }
    if (o['phone'] != null) {
      phone = o['phone'].toString();
    }
    if (o['birthDate'] != null) {
      birthDate = o['birthDate'].toString();
    }
    if (o['city'] != null) {
      city = o['city'].toString();
    }
    if (o['zipCode'] != null) {
      zipCode = o['zipCode'].toString();
    }
    if (o['isActive'] != null) {
      isActive = o['isActive'].toString();
    }
    if (o['idDoku'] != null) {
      idDoku = o['idDoku'].toString();
    }
    if (o['whatsAppNumber'] != null) {
      whatsAppNumber = o['whatsAppNumber'].toString();
    }
    if (o['loginCheck'] != null) {
      loginCheck = o['loginCheck'].toString();
    }
    if (o['deviceLoyalty'] != null) {
      deviceLoyalty = o['deviceLoyalty'].toString();
    }
    if (o['createDate'] != null) {
      createDate = o['createDate'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Account)
  int? id;
  String? userId;
  String? email;
  String? fullName;
  String? gender;
  String? address;
  String? phone;
  String? birthDate;
  String? city;
  String? zipCode;
  String? isActive;
  String? idDoku;
  String? whatsAppNumber;
  String? loginCheck;
  String? deviceLoyalty;
  String? createDate;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Account)

  static const bool _softDeleteActivated = false;
  AccountManager? __mnAccount;

  AccountManager get _mnAccount {
    return __mnAccount = __mnAccount ?? AccountManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (userId != null) {
      map['userId'] = userId;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (fullName != null) {
      map['fullName'] = fullName;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (address != null) {
      map['address'] = address;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (birthDate != null) {
      map['birthDate'] = birthDate;
    }

    if (city != null) {
      map['city'] = city;
    }

    if (zipCode != null) {
      map['zipCode'] = zipCode;
    }

    if (isActive != null) {
      map['isActive'] = isActive;
    }

    if (idDoku != null) {
      map['idDoku'] = idDoku;
    }

    if (whatsAppNumber != null) {
      map['whatsAppNumber'] = whatsAppNumber;
    }

    if (loginCheck != null) {
      map['loginCheck'] = loginCheck;
    }

    if (deviceLoyalty != null) {
      map['deviceLoyalty'] = deviceLoyalty;
    }

    if (createDate != null) {
      map['createDate'] = createDate;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (userId != null) {
      map['userId'] = userId;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (fullName != null) {
      map['fullName'] = fullName;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (address != null) {
      map['address'] = address;
    }

    if (phone != null) {
      map['phone'] = phone;
    }

    if (birthDate != null) {
      map['birthDate'] = birthDate;
    }

    if (city != null) {
      map['city'] = city;
    }

    if (zipCode != null) {
      map['zipCode'] = zipCode;
    }

    if (isActive != null) {
      map['isActive'] = isActive;
    }

    if (idDoku != null) {
      map['idDoku'] = idDoku;
    }

    if (whatsAppNumber != null) {
      map['whatsAppNumber'] = whatsAppNumber;
    }

    if (loginCheck != null) {
      map['loginCheck'] = loginCheck;
    }

    if (deviceLoyalty != null) {
      map['deviceLoyalty'] = deviceLoyalty;
    }

    if (createDate != null) {
      map['createDate'] = createDate;
    }

    return map;
  }

  /// This method returns Json String [Account]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Account]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      userId,
      email,
      fullName,
      gender,
      address,
      phone,
      birthDate,
      city,
      zipCode,
      isActive,
      idDoku,
      whatsAppNumber,
      loginCheck,
      deviceLoyalty,
      createDate
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      userId,
      email,
      fullName,
      gender,
      address,
      phone,
      birthDate,
      city,
      zipCode,
      isActive,
      idDoku,
      whatsAppNumber,
      loginCheck,
      deviceLoyalty,
      createDate
    ];
  }

  static Future<List<Account>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Account.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Account>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Account>[];
    try {
      objList = list
          .map((account) => Account.fromMap(account as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Account.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Account>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Account> objList = <Account>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Account.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Account by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Account if exist, otherwise returns null
  Future<Account?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Account? obj;
    final data = await _mnAccount.getById([id]);
    if (data.length != 0) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Account) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int?> save() async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnAccount.insert(this);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnAccount.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Account> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Account> accounts) async {
    // final results = _mnAccount.saveAll('INSERT OR REPLACE INTO account (id, userId, email, fullName, gender, address, phone, birthDate, city, zipCode, isActive, idDoku, whatsAppNumber, loginCheck, deviceLoyalty, createDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',accounts);
    // return results; removed in sqfentity_gen 1.3.0+6
    await SkeletonDBModel().batchStart();
    for (final obj in accounts) {
      await obj.save();
    }
    //    return SkeletonDBModel().batchCommit();
    final result = await SkeletonDBModel().batchCommit();
    for (int i = 0; i < accounts.length; i++) {
      if (accounts[i].id == null) {
        accounts[i].id = result![i] as int;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnAccount.rawInsert(
          'INSERT OR REPLACE INTO account (id, userId, email, fullName, gender, address, phone, birthDate, city, zipCode, isActive, idDoku, whatsAppNumber, loginCheck, deviceLoyalty, createDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            userId,
            email,
            fullName,
            gender,
            address,
            phone,
            birthDate,
            city,
            zipCode,
            isActive,
            idDoku,
            whatsAppNumber,
            loginCheck,
            deviceLoyalty,
            createDate
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Account id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Account id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Account Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Account>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Account> accounts) async {
    final results = await _mnAccount.rawInsertAll(
        'INSERT OR REPLACE INTO account (id, userId, email, fullName, gender, address, phone, birthDate, city, zipCode, isActive, idDoku, whatsAppNumber, loginCheck, deviceLoyalty, createDate)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',
        accounts);
    return results;
  }

  /// Deletes Account

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Account invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAccount
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAccount.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  AccountFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  AccountFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion account

// region AccountField
class AccountField extends SearchCriteria {
  AccountField(this.accountFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  AccountFilterBuilder accountFB;

  AccountField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  AccountFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param, SqlSyntax.EQuals,
            accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param, SqlSyntax.NotEQuals,
            accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.EQualsOrNull, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder isNull() {
    accountFB._addedBlocks = setCriteria(
        0,
        accountFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      accountFB._addedBlocks = setCriteria(
          pFirst,
          accountFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        accountFB._addedBlocks = setCriteria(pFirst, accountFB.parameters,
            param, SqlSyntax.LessThan, accountFB._addedBlocks);
      } else {
        accountFB._addedBlocks = setCriteria(pFirst, accountFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        accountFB._addedBlocks = setCriteria(pLast, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks);
      } else {
        accountFB._addedBlocks = setCriteria(pLast, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks);
      }
    }
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param, SqlSyntax.LessThan,
            accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param, SqlSyntax.LessThan,
            accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder inValues(dynamic pValue) {
    accountFB._addedBlocks = setCriteria(
        pValue,
        accountFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }
}
// endregion AccountField

// region AccountFilterBuilder
class AccountFilterBuilder extends SearchCriteria {
  AccountFilterBuilder(Account obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Account? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  AccountFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  AccountFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  AccountFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  AccountFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  AccountFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  AccountFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  AccountFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccountFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccountFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccountFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccountFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  AccountField setField(AccountField? field, String colName, DbType dbtype) {
    return AccountField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  AccountField? _id;
  AccountField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  AccountField? _userId;
  AccountField get userId {
    return _userId = setField(_userId, 'userId', DbType.text);
  }

  AccountField? _email;
  AccountField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  AccountField? _fullName;
  AccountField get fullName {
    return _fullName = setField(_fullName, 'fullName', DbType.text);
  }

  AccountField? _gender;
  AccountField get gender {
    return _gender = setField(_gender, 'gender', DbType.text);
  }

  AccountField? _address;
  AccountField get address {
    return _address = setField(_address, 'address', DbType.text);
  }

  AccountField? _phone;
  AccountField get phone {
    return _phone = setField(_phone, 'phone', DbType.text);
  }

  AccountField? _birthDate;
  AccountField get birthDate {
    return _birthDate = setField(_birthDate, 'birthDate', DbType.text);
  }

  AccountField? _city;
  AccountField get city {
    return _city = setField(_city, 'city', DbType.text);
  }

  AccountField? _zipCode;
  AccountField get zipCode {
    return _zipCode = setField(_zipCode, 'zipCode', DbType.text);
  }

  AccountField? _isActive;
  AccountField get isActive {
    return _isActive = setField(_isActive, 'isActive', DbType.text);
  }

  AccountField? _idDoku;
  AccountField get idDoku {
    return _idDoku = setField(_idDoku, 'idDoku', DbType.text);
  }

  AccountField? _whatsAppNumber;
  AccountField get whatsAppNumber {
    return _whatsAppNumber =
        setField(_whatsAppNumber, 'whatsAppNumber', DbType.text);
  }

  AccountField? _loginCheck;
  AccountField get loginCheck {
    return _loginCheck = setField(_loginCheck, 'loginCheck', DbType.text);
  }

  AccountField? _deviceLoyalty;
  AccountField get deviceLoyalty {
    return _deviceLoyalty =
        setField(_deviceLoyalty, 'deviceLoyalty', DbType.text);
  }

  AccountField? _createDate;
  AccountField get createDate {
    return _createDate = setField(_createDate, 'createDate', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Account._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Account> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Account._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnAccount.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnAccount.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from account ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnAccount.updateBatch(qparams, values);
  }

  /// This method always returns Account Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Account>
  Future<Account?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnAccount.toList(qparams);
    final data = await objFuture;
    Account? obj;
    if (data.isNotEmpty) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Account]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? accountCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final accountsFuture = await _obj!._mnAccount.toList(qparams);
    final int count = accountsFuture[0]['CNT'] as int;
    if (accountCount != null) {
      accountCount(count);
    }
    return count;
  }

  /// This method returns List<Account> [Account]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Account>
  Future<List<Account>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Account> accountsData = await Account.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return accountsData;
  }

  /// This method returns Json String [Account]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Account]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Account]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnAccount.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Account]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM account WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnAccount.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Account]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnAccount.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Account.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnAccount.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AccountFilterBuilder

// region AccountFields
class AccountFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fUserId;
  static TableField get userId {
    return _fUserId =
        _fUserId ?? SqlSyntax.setField(_fUserId, 'userId', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fFullName;
  static TableField get fullName {
    return _fFullName =
        _fFullName ?? SqlSyntax.setField(_fFullName, 'fullName', DbType.text);
  }

  static TableField? _fGender;
  static TableField get gender {
    return _fGender =
        _fGender ?? SqlSyntax.setField(_fGender, 'gender', DbType.text);
  }

  static TableField? _fAddress;
  static TableField get address {
    return _fAddress =
        _fAddress ?? SqlSyntax.setField(_fAddress, 'address', DbType.text);
  }

  static TableField? _fPhone;
  static TableField get phone {
    return _fPhone =
        _fPhone ?? SqlSyntax.setField(_fPhone, 'phone', DbType.text);
  }

  static TableField? _fBirthDate;
  static TableField get birthDate {
    return _fBirthDate = _fBirthDate ??
        SqlSyntax.setField(_fBirthDate, 'birthDate', DbType.text);
  }

  static TableField? _fCity;
  static TableField get city {
    return _fCity = _fCity ?? SqlSyntax.setField(_fCity, 'city', DbType.text);
  }

  static TableField? _fZipCode;
  static TableField get zipCode {
    return _fZipCode =
        _fZipCode ?? SqlSyntax.setField(_fZipCode, 'zipCode', DbType.text);
  }

  static TableField? _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.text);
  }

  static TableField? _fIdDoku;
  static TableField get idDoku {
    return _fIdDoku =
        _fIdDoku ?? SqlSyntax.setField(_fIdDoku, 'idDoku', DbType.text);
  }

  static TableField? _fWhatsAppNumber;
  static TableField get whatsAppNumber {
    return _fWhatsAppNumber = _fWhatsAppNumber ??
        SqlSyntax.setField(_fWhatsAppNumber, 'whatsAppNumber', DbType.text);
  }

  static TableField? _fLoginCheck;
  static TableField get loginCheck {
    return _fLoginCheck = _fLoginCheck ??
        SqlSyntax.setField(_fLoginCheck, 'loginCheck', DbType.text);
  }

  static TableField? _fDeviceLoyalty;
  static TableField get deviceLoyalty {
    return _fDeviceLoyalty = _fDeviceLoyalty ??
        SqlSyntax.setField(_fDeviceLoyalty, 'deviceLoyalty', DbType.text);
  }

  static TableField? _fCreateDate;
  static TableField get createDate {
    return _fCreateDate = _fCreateDate ??
        SqlSyntax.setField(_fCreateDate, 'createDate', DbType.text);
  }
}
// endregion AccountFields

//region AccountManager
class AccountManager extends SqfEntityProvider {
  AccountManager()
      : super(SkeletonDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'account';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion AccountManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await SkeletonDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await SkeletonDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await SkeletonDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class SkeletonDBModelSequenceManager extends SqfEntityProvider {
  SkeletonDBModelSequenceManager() : super(SkeletonDBModel());
}
// END OF ENTITIES
